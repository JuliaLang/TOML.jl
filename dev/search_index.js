var documenterSearchIndex = {"docs":
[{"location":"#TOML","page":"TOML","title":"TOML","text":"","category":"section"},{"location":"","page":"TOML","title":"TOML","text":"TOML.jl is a Julia standard library for parsing and writing TOML v1.0 files.","category":"page"},{"location":"#Parsing-TOML-data","page":"TOML","title":"Parsing TOML data","text":"","category":"section"},{"location":"","page":"TOML","title":"TOML","text":"julia> using TOML\n\njulia> data = \"\"\"\n           [database]\n           server = \"192.168.1.1\"\n           ports = [ 8001, 8001, 8002 ]\n       \"\"\";\n\njulia> TOML.parsestring(data)\nDict{String,Any} with 1 entry:\n  \"database\" => Dict{String,Any}(\"server\"=>\"192.168.1.1\",\"ports\"=>Any[8001, 800â€¦","category":"page"},{"location":"","page":"TOML","title":"TOML","text":"To parse a file, use TOML.parsefile. If the file has a syntax error, an exception is thrown:","category":"page"},{"location":"","page":"TOML","title":"TOML","text":"julia> using TOML\n\njulia> TOML.parsestring(\"\"\"\n           value = 0.0.0\n       \"\"\")\nERROR: TOML Parser error:\nnone:1:16 error: failed to parse value\n      value = 0.0.0\n                 ^\n[...]","category":"page"},{"location":"","page":"TOML","title":"TOML","text":"There are other versions of the parse functions (TOML.tryparsestring and [TOML.tryparsefile]) that instead of throwing exceptions on parser error returns a TOML.ParserError with information:","category":"page"},{"location":"","page":"TOML","title":"TOML","text":"julia> using TOML\n\njulia> err = TOML.tryparsestring(\"\"\"\n           value = 0.0.0\n       \"\"\");\n\njulia> err.type\nErrGenericValueError::ErrorType = 14\n\njulia> err.line\n1\n\njulia> err.column\n16","category":"page"},{"location":"#Exporting-data-to-TOML-file","page":"TOML","title":"Exporting data to TOML file","text":"","category":"section"},{"location":"","page":"TOML","title":"TOML","text":"The TOML.print function is used to print (or serialize) data into TOML format.","category":"page"},{"location":"","page":"TOML","title":"TOML","text":"julia> using TOML\n\njulia> fname = tempname();\n\njulia> data = Dict(\n          \"names\" => [\"Julia\", \"Julio\"],\n          \"age\" => [10, 20],\n       );\n\njulia> open(fname, \"w\") do io\n           TOML.print(io, data)\n       end;\n\njulia> print(read(fname, String))\nnames = [\"Julia\", \"Julio\"]\nage = [10, 20]","category":"page"},{"location":"#References","page":"TOML","title":"References","text":"","category":"section"},{"location":"","page":"TOML","title":"TOML","text":"TOML.parsestring\nTOML.parsefile\nTOML.tryparsestring\nTOML.tryparsefile\nTOML.print\nTOML.Parser\nTOML.ParserError","category":"page"},{"location":"#TOML.parsestring","page":"TOML","title":"TOML.parsestring","text":"parsestring(str::AbstractString)\nparsestring(p::Parser, str::AbstractString)\n\nParses a string str and returns the resulting table (dictionary). Returns a ParserError upon failure.\n\nSee also TOML.tryparsestring\n\n\n\n\n\n","category":"function"},{"location":"#TOML.parsefile","page":"TOML","title":"TOML.parsefile","text":"parsefile(f::AbstractString)\nparsefile(p::Parser, f::AbstractString)\n\nParses a file f and returns the resulting table (dictionary). Throws a ParserError upon failure.\n\nSee also TOML.tryparsefile\n\n\n\n\n\n","category":"function"},{"location":"#TOML.tryparsestring","page":"TOML","title":"TOML.tryparsestring","text":"tryparsestring(str::AbstractString)\ntryparsestring(p::Parser, str::AbstractString)\n\nParses a string str and returns the resulting table (dictionary). Returns a ParserError upon failure.\n\nSee also TOML.parsestring\n\n\n\n\n\n","category":"function"},{"location":"#TOML.tryparsefile","page":"TOML","title":"TOML.tryparsefile","text":"tryparsefile(f::AbstractString)\ntryparsefile(p::Parser, f::AbstractString)\n\nParses a file f and returns the resulting table (dictionary). Returns a ParserError upon failure.\n\nSee also TOML.parsefile\n\n\n\n\n\n","category":"function"},{"location":"#TOML.print","page":"TOML","title":"TOML.print","text":"print(io::IO, data::AbstractDict)\n\nWrites data into TOML syntax to the stream io.\n\n\n\n\n\n","category":"function"},{"location":"#TOML.Parser","page":"TOML","title":"TOML.Parser","text":"Parser()\n\nConstructor for a TOML Parser.  Note that in most cases one does not need to explicitly create a Parser but instead one directly use use TOML.parsefile or parsestring.  Using an explicit parser will however reuse some internal data structures which can be beneficial for performance if a larger number of small files are parsed.\n\n\n\n\n\n","category":"type"},{"location":"#TOML.ParserError","page":"TOML","title":"TOML.ParserError","text":"ParserError\n\nType that is returned from tryparsestring and tryparsefile when parsing fails. It contains (among others) the following fields:\n\npos, the position in the string when the error happened\ntable, the result that so far was successfully parsed\ntype, an error type, different for different types of errors\n\n\n\n\n\n","category":"type"}]
}
